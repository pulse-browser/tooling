// This file is autogenerated. If you need to modify it, change scripts/createElementTypes.ts instead.

// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

import { UniversalXULProps } from './xul.d.ts'

type XULElementBuilder<T> = T &
  UniversalXULProps

import { actionProps } from './elements/action.d.ts'
import { arrowscrollboxProps } from './elements/arrowscrollbox.d.ts'
import { bboxProps } from './elements/bbox.d.ts'
import { bindingProps } from './elements/binding.d.ts'
import { bindingsProps } from './elements/bindings.d.ts'
import { boxProps } from './elements/box.d.ts'
import { broadcasterProps } from './elements/broadcaster.d.ts'
import { broadcastersetProps } from './elements/broadcasterset.d.ts'
import { buttonProps } from './elements/button.d.ts'
import { browserProps } from './elements/browser.d.ts'
import { checkboxProps } from './elements/checkbox.d.ts'
import { captionProps } from './elements/caption.d.ts'
import { colorpickerProps } from './elements/colorpicker.d.ts'
import { columnProps } from './elements/column.d.ts'
import { columnsProps } from './elements/columns.d.ts'
import { commandsetProps } from './elements/commandset.d.ts'
import { commandProps } from './elements/command.d.ts'
import { conditionsProps } from './elements/conditions.d.ts'
import { contentProps } from './elements/content.d.ts'
import { deckProps } from './elements/deck.d.ts'
import { descriptionProps } from './elements/description.d.ts'
import { dialogProps } from './elements/dialog.d.ts'
import { dialogheaderProps } from './elements/dialogheader.d.ts'
import { editorProps } from './elements/editor.d.ts'
import { gridProps } from './elements/grid.d.ts'
import { grippyProps } from './elements/grippy.d.ts'
import { groupboxProps } from './elements/groupbox.d.ts'
import { hboxProps } from './elements/hbox.d.ts'
import { iframeProps } from './elements/iframe.d.ts'
import { imageProps } from './elements/image.d.ts'
import { keyProps } from './elements/key.d.ts'
import { keysetProps } from './elements/keyset.d.ts'
import { labelProps } from './elements/label.d.ts'
import { listboxProps } from './elements/listbox.d.ts'
import { listcellProps } from './elements/listcell.d.ts'
import { listcolProps } from './elements/listcol.d.ts'
import { listcolsProps } from './elements/listcols.d.ts'
import { listheadProps } from './elements/listhead.d.ts'
import { listheaderProps } from './elements/listheader.d.ts'
import { listitemProps } from './elements/listitem.d.ts'
import { memberProps } from './elements/member.d.ts'
import { menuProps } from './elements/menu.d.ts'
import { menubarProps } from './elements/menubar.d.ts'
import { menuitemProps } from './elements/menuitem.d.ts'
import { menulistProps } from './elements/menulist.d.ts'
import { menupopupProps } from './elements/menupopup.d.ts'
import { menuseparatorProps } from './elements/menuseparator.d.ts'
import { observesProps } from './elements/observes.d.ts'
import { overlayProps } from './elements/overlay.d.ts'
import { pageProps } from './elements/page.d.ts'
import { popupProps } from './elements/popup.d.ts'
import { popupsetProps } from './elements/popupset.d.ts'
import { preferenceProps } from './elements/preference.d.ts'
import { preferencesProps } from './elements/preferences.d.ts'
import { prefpaneProps } from './elements/prefpane.d.ts'
import { prefwindowProps } from './elements/prefwindow.d.ts'
import { progressmeterProps } from './elements/progressmeter.d.ts'
import { radioProps } from './elements/radio.d.ts'
import { radiogroupProps } from './elements/radiogroup.d.ts'
import { resizerProps } from './elements/resizer.d.ts'
import { richlistboxProps } from './elements/richlistbox.d.ts'
import { richlistitemProps } from './elements/richlistitem.d.ts'
import { resizerProps } from './elements/resizer.d.ts'
import { rowProps } from './elements/row.d.ts'
import { rowsProps } from './elements/rows.d.ts'
import { ruleProps } from './elements/rule.d.ts'
import { scriptProps } from './elements/script.d.ts'
import { scrollbarProps } from './elements/scrollbar.d.ts'
import { scrollboxProps } from './elements/scrollbox.d.ts'
import { scrollcornerProps } from './elements/scrollcorner.d.ts'
import { separatorProps } from './elements/separator.d.ts'
import { spacerProps } from './elements/spacer.d.ts'
import { splitterProps } from './elements/splitter.d.ts'
import { stackProps } from './elements/stack.d.ts'
import { statusbarProps } from './elements/statusbar.d.ts'
import { statusbarpanelProps } from './elements/statusbarpanel.d.ts'
import { stringbundleProps } from './elements/stringbundle.d.ts'
import { stringbundlesetProps } from './elements/stringbundleset.d.ts'
import { tabProps } from './elements/tab.d.ts'
import { tabbrowserProps } from './elements/tabbrowser.d.ts'
import { tabboxProps } from './elements/tabbox.d.ts'
import { tabpanelProps } from './elements/tabpanel.d.ts'
import { tabpanelsProps } from './elements/tabpanels.d.ts'
import { tabsProps } from './elements/tabs.d.ts'
import { templateProps } from './elements/template.d.ts'
import { textnodeProps } from './elements/textnode.d.ts'
import { textboxProps } from './elements/textbox.d.ts'
import { titlebarProps } from './elements/titlebar.d.ts'
import { toolbarProps } from './elements/toolbar.d.ts'
import { toolbarbuttonProps } from './elements/toolbarbutton.d.ts'
import { toolbargrippyProps } from './elements/toolbargrippy.d.ts'
import { toolbaritemProps } from './elements/toolbaritem.d.ts'
import { toolbarpaletteProps } from './elements/toolbarpalette.d.ts'
import { toolbarseparatorProps } from './elements/toolbarseparator.d.ts'
import { toolbarsetProps } from './elements/toolbarset.d.ts'
import { toolbarspacerProps } from './elements/toolbarspacer.d.ts'
import { toolbarspringProps } from './elements/toolbarspring.d.ts'
import { toolboxProps } from './elements/toolbox.d.ts'
import { tooltipProps } from './elements/tooltip.d.ts'
import { treeProps } from './elements/tree.d.ts'
import { treecellProps } from './elements/treecell.d.ts'
import { treechildrenProps } from './elements/treechildren.d.ts'
import { treecolProps } from './elements/treecol.d.ts'
import { treecolsProps } from './elements/treecols.d.ts'
import { treeitemProps } from './elements/treeitem.d.ts'
import { treerowProps } from './elements/treerow.d.ts'
import { treeseparatorProps } from './elements/treeseparator.d.ts'
import { tripleProps } from './elements/triple.d.ts'
import { vboxProps } from './elements/vbox.d.ts'
import { windowProps } from './elements/window.d.ts'
import { wizardProps } from './elements/wizard.d.ts'
import { wizardpageProps } from './elements/wizardpage.d.ts'


declare global {
    namespace JSX {
        interface IntrinsicElements {
            action: XULElementBuilder<actionProps>;
            arrowscrollbox: XULElementBuilder<arrowscrollboxProps>;
            bbox: XULElementBuilder<bboxProps>;
            binding: XULElementBuilder<bindingProps>;
            bindings: XULElementBuilder<bindingsProps>;
            box: XULElementBuilder<boxProps>;
            broadcaster: XULElementBuilder<broadcasterProps>;
            broadcasterset: XULElementBuilder<broadcastersetProps>;
            button: XULElementBuilder<buttonProps>;
            browser: XULElementBuilder<browserProps>;
            checkbox: XULElementBuilder<checkboxProps>;
            caption: XULElementBuilder<captionProps>;
            colorpicker: XULElementBuilder<colorpickerProps>;
            column: XULElementBuilder<columnProps>;
            columns: XULElementBuilder<columnsProps>;
            commandset: XULElementBuilder<commandsetProps>;
            command: XULElementBuilder<commandProps>;
            conditions: XULElementBuilder<conditionsProps>;
            content: XULElementBuilder<contentProps>;
            deck: XULElementBuilder<deckProps>;
            description: XULElementBuilder<descriptionProps>;
            dialog: XULElementBuilder<dialogProps>;
            dialogheader: XULElementBuilder<dialogheaderProps>;
            editor: XULElementBuilder<editorProps>;
            grid: XULElementBuilder<gridProps>;
            grippy: XULElementBuilder<grippyProps>;
            groupbox: XULElementBuilder<groupboxProps>;
            hbox: XULElementBuilder<hboxProps>;
            iframe: XULElementBuilder<iframeProps>;
            image: XULElementBuilder<imageProps>;
            key: XULElementBuilder<keyProps>;
            keyset: XULElementBuilder<keysetProps>;
            label: XULElementBuilder<labelProps>;
            listbox: XULElementBuilder<listboxProps>;
            listcell: XULElementBuilder<listcellProps>;
            listcol: XULElementBuilder<listcolProps>;
            listcols: XULElementBuilder<listcolsProps>;
            listhead: XULElementBuilder<listheadProps>;
            listheader: XULElementBuilder<listheaderProps>;
            listitem: XULElementBuilder<listitemProps>;
            member: XULElementBuilder<memberProps>;
            menu: XULElementBuilder<menuProps>;
            menubar: XULElementBuilder<menubarProps>;
            menuitem: XULElementBuilder<menuitemProps>;
            menulist: XULElementBuilder<menulistProps>;
            menupopup: XULElementBuilder<menupopupProps>;
            menuseparator: XULElementBuilder<menuseparatorProps>;
            observes: XULElementBuilder<observesProps>;
            overlay: XULElementBuilder<overlayProps>;
            page: XULElementBuilder<pageProps>;
            popup: XULElementBuilder<popupProps>;
            popupset: XULElementBuilder<popupsetProps>;
            preference: XULElementBuilder<preferenceProps>;
            preferences: XULElementBuilder<preferencesProps>;
            prefpane: XULElementBuilder<prefpaneProps>;
            prefwindow: XULElementBuilder<prefwindowProps>;
            progressmeter: XULElementBuilder<progressmeterProps>;
            radio: XULElementBuilder<radioProps>;
            radiogroup: XULElementBuilder<radiogroupProps>;
            resizer: XULElementBuilder<resizerProps>;
            richlistbox: XULElementBuilder<richlistboxProps>;
            richlistitem: XULElementBuilder<richlistitemProps>;
            resizer: XULElementBuilder<resizerProps>;
            row: XULElementBuilder<rowProps>;
            rows: XULElementBuilder<rowsProps>;
            rule: XULElementBuilder<ruleProps>;
            script: XULElementBuilder<scriptProps>;
            scrollbar: XULElementBuilder<scrollbarProps>;
            scrollbox: XULElementBuilder<scrollboxProps>;
            scrollcorner: XULElementBuilder<scrollcornerProps>;
            separator: XULElementBuilder<separatorProps>;
            spacer: XULElementBuilder<spacerProps>;
            splitter: XULElementBuilder<splitterProps>;
            stack: XULElementBuilder<stackProps>;
            statusbar: XULElementBuilder<statusbarProps>;
            statusbarpanel: XULElementBuilder<statusbarpanelProps>;
            stringbundle: XULElementBuilder<stringbundleProps>;
            stringbundleset: XULElementBuilder<stringbundlesetProps>;
            tab: XULElementBuilder<tabProps>;
            tabbrowser: XULElementBuilder<tabbrowserProps>;
            tabbox: XULElementBuilder<tabboxProps>;
            tabpanel: XULElementBuilder<tabpanelProps>;
            tabpanels: XULElementBuilder<tabpanelsProps>;
            tabs: XULElementBuilder<tabsProps>;
            template: XULElementBuilder<templateProps>;
            textnode: XULElementBuilder<textnodeProps>;
            textbox: XULElementBuilder<textboxProps>;
            titlebar: XULElementBuilder<titlebarProps>;
            toolbar: XULElementBuilder<toolbarProps>;
            toolbarbutton: XULElementBuilder<toolbarbuttonProps>;
            toolbargrippy: XULElementBuilder<toolbargrippyProps>;
            toolbaritem: XULElementBuilder<toolbaritemProps>;
            toolbarpalette: XULElementBuilder<toolbarpaletteProps>;
            toolbarseparator: XULElementBuilder<toolbarseparatorProps>;
            toolbarset: XULElementBuilder<toolbarsetProps>;
            toolbarspacer: XULElementBuilder<toolbarspacerProps>;
            toolbarspring: XULElementBuilder<toolbarspringProps>;
            toolbox: XULElementBuilder<toolboxProps>;
            tooltip: XULElementBuilder<tooltipProps>;
            tree: XULElementBuilder<treeProps>;
            treecell: XULElementBuilder<treecellProps>;
            treechildren: XULElementBuilder<treechildrenProps>;
            treecol: XULElementBuilder<treecolProps>;
            treecols: XULElementBuilder<treecolsProps>;
            treeitem: XULElementBuilder<treeitemProps>;
            treerow: XULElementBuilder<treerowProps>;
            treeseparator: XULElementBuilder<treeseparatorProps>;
            triple: XULElementBuilder<tripleProps>;
            vbox: XULElementBuilder<vboxProps>;
            window: XULElementBuilder<windowProps>;
            wizard: XULElementBuilder<wizardProps>;
            wizardpage: XULElementBuilder<wizardpageProps>;
        }
    }
}

